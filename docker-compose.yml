version: "3.8"

networks:
  observability:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  tempo_data: {}
  zbx-db-data: {}

services:
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.enable-remote-write-receiver
    ports:
      - "9090:9090"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - observability

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    restart: unless-stopped
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - observability

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - observability

  tempo:
    image: grafana/tempo:2.6.0
    container_name: tempo
    restart: unless-stopped
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    ports:
      - "3200:3200"     # Tempo HTTP (metrics/UI)
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo/tempo.yaml:ro
      - tempo_data:/var/tempo
    networks:
      - observability

  otel-collector:
    image: otel/opentelemetry-collector:0.106.1
    container_name: otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otelcol/otel-collector.yaml"]
    ports:
      - "4317:4317"   # OTLP gRPC ingest
      - "4318:4318"   # OTLP HTTP ingest
      - "8889:8889"   # Prometheus exporter metrics
    volumes:
      - ./otel-collector/otel-collector.yaml:/etc/otelcol/otel-collector.yaml:ro
    networks:
      - observability

  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: node-exporter
    restart: unless-stopped
    pid: host
    network_mode: host
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    # exposes 9100 on host network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.2
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - observability

  blackbox-exporter:
    image: prom/blackbox-exporter:v0.25.0
    container_name: blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./exporters/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    command: ["--config.file=/etc/blackbox_exporter/config.yml"]
    networks:
      - observability

  stackdriver-exporter:
    image: prometheuscommunity/stackdriver-exporter:v0.15.0
    container_name: stackdriver-exporter
    restart: unless-stopped
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/gcp/key.json
      - STACKDRIVER_EXPORTER_GOOGLE_PROJECT_ID=${GCP_PROJECT_ID}
      - STACKDRIVER_EXPORTER_MONITORING_METRICS_TYPE_PREFIXES=${STACKDRIVER_METRICS_PREFIXES}
      - STACKDRIVER_EXPORTER_WEB_LISTEN_ADDRESS=${STACKDRIVER_LISTEN_ADDRESS}
    ports:
      - "9255:9255"
    volumes:
      - ./gcp-service-account/key.json:/gcp/key.json:ro
    networks:
      - observability

  zbx-db:
    image: postgres:16
    container_name: zbx-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${ZBX_DB_USER}
      - POSTGRES_PASSWORD=${ZBX_DB_PASSWORD}
      - POSTGRES_DB=${ZBX_DB_NAME}
    volumes:
      - zbx-db-data:/var/lib/postgresql/data
    networks:
      - observability

  zabbix-server:
    image: zabbix/zabbix-server-pgsql:alpine-7.0-latest
    container_name: zabbix-server
    restart: unless-stopped
    environment:
      - DB_SERVER_HOST=zbx-db
      - POSTGRES_USER=${ZBX_DB_USER}
      - POSTGRES_PASSWORD=${ZBX_DB_PASSWORD}
      - POSTGRES_DB=${ZBX_DB_NAME}
      - ZBX_STARTPOLLERS=${ZBX_STARTPOLLERS}
      - ZBX_ENABLE_SNMP=${ZBX_ENABLE_SNMP}
    depends_on:
      - zbx-db
    ports:
      - "10051:10051"
    networks:
      - observability

  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:alpine-7.0-latest
    container_name: zabbix-web
    restart: unless-stopped
    environment:
      - DB_SERVER_HOST=zbx-db
      - POSTGRES_USER=${ZBX_DB_USER}
      - POSTGRES_PASSWORD=${ZBX_DB_PASSWORD}
      - POSTGRES_DB=${ZBX_DB_NAME}
      - ZBX_SERVER_HOST=zabbix-server
      - PHP_TZ=${PHP_TZ}
    depends_on:
      - zabbix-server
    ports:
      - "8080:8080"
    networks:
      - observability
